[
  "error ArrayLengthMismatch()",
  "error AuthenticatorNotWhitelisted()",
  "error DuplicateFound(uint8 index)",
  "error EmptyArray()",
  "error ExceedsStrategyLimit()",
  "error FailedToPassProposalValidation()",
  "error InvalidCaller()",
  "error InvalidDuration(uint32 minVotingDuration, uint32 maxVotingDuration)",
  "error InvalidPayload()",
  "error InvalidProposal()",
  "error InvalidStrategyIndex(uint256 index)",
  "error NoActiveVotingStrategies()",
  "error ProposalFinalized()",
  "error UserAlreadyVoted()",
  "error UserHasNoVotingPower()",
  "error VotingDelayHasPassed()",
  "error VotingPeriodHasEnded()",
  "error VotingPeriodHasNotStarted()",
  "error ZeroAddress()",
  "event AdminChanged(address previousAdmin, address newAdmin)",
  "event AuthenticatorsAdded(address[] newAuthenticators)",
  "event AuthenticatorsRemoved(address[] authenticators)",
  "event BeaconUpgraded(address indexed beacon)",
  "event DaoURIUpdated(string newDaoURI)",
  "event Initialized(uint8 version)",
  "event MaxVotingDurationUpdated(uint32 newMaxVotingDuration)",
  "event MetadataURIUpdated(string newMetadataURI)",
  "event MinVotingDurationUpdated(uint32 newMinVotingDuration)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event ProposalCancelled(uint256 proposalId)",
  "event ProposalCreated(uint256 proposalId, address author, tuple(address author, uint32 startBlockNumber, address executionStrategy, uint32 minEndBlockNumber, uint32 maxEndBlockNumber, uint8 finalizationStatus, bytes32 executionPayloadHash, uint256 activeVotingStrategies) proposal, string metadataUri, bytes payload)",
  "event ProposalExecuted(uint256 proposalId)",
  "event ProposalUpdated(uint256 proposalId, tuple(address addr, bytes params) newExecutionStrategy, string newMetadataURI)",
  "event ProposalValidationStrategyUpdated(tuple(address addr, bytes params) newProposalValidationStrategy, string newProposalValidationStrategyMetadataURI)",
  "event SpaceCreated(address space, tuple(address owner, uint32 votingDelay, uint32 minVotingDuration, uint32 maxVotingDuration, tuple(address addr, bytes params) proposalValidationStrategy, string proposalValidationStrategyMetadataURI, string daoURI, string metadataURI, tuple(address addr, bytes params)[] votingStrategies, string[] votingStrategyMetadataURIs, address[] authenticators) input)",
  "event Upgraded(address indexed implementation)",
  "event VoteCast(uint256 proposalId, address voter, uint8 choice, uint256 votingPower)",
  "event VoteCastWithMetadata(uint256 proposalId, address voter, uint8 choice, uint256 votingPower, string metadataUri)",
  "event VotingDelayUpdated(uint32 newVotingDelay)",
  "event VotingStrategiesAdded(tuple(address addr, bytes params)[] newVotingStrategies, string[] newVotingStrategyMetadataURIs)",
  "event VotingStrategiesRemoved(uint8[] votingStrategyIndices)",
  "function activeVotingStrategies() view returns (uint256)",
  "function authenticators(address auth) view returns (uint256 allowed)",
  "function cancel(uint256 proposalId)",
  "function daoURI() view returns (string)",
  "function execute(uint256 proposalId, bytes executionPayload)",
  "function getProposalStatus(uint256 proposalId) view returns (uint8)",
  "function initialize(tuple(address owner, uint32 votingDelay, uint32 minVotingDuration, uint32 maxVotingDuration, tuple(address addr, bytes params) proposalValidationStrategy, string proposalValidationStrategyMetadataURI, string daoURI, string metadataURI, tuple(address addr, bytes params)[] votingStrategies, string[] votingStrategyMetadataURIs, address[] authenticators) input)",
  "function maxVotingDuration() view returns (uint32)",
  "function minVotingDuration() view returns (uint32)",
  "function nextProposalId() view returns (uint256)",
  "function nextVotingStrategyIndex() view returns (uint8)",
  "function owner() view returns (address)",
  "function proposalValidationStrategy() view returns (address addr, bytes params)",
  "function proposals(uint256 proposalId) view returns (address author, uint32 startBlockNumber, address executionStrategy, uint32 minEndBlockNumber, uint32 maxEndBlockNumber, uint8 finalizationStatus, bytes32 executionPayloadHash, uint256 activeVotingStrategies)",
  "function propose(address author, string metadataURI, tuple(address addr, bytes params) executionStrategy, bytes userProposalValidationParams)",
  "function proxiableUUID() view returns (bytes32)",
  "function renounceOwnership()",
  "function transferOwnership(address newOwner)",
  "function updateProposal(address author, uint256 proposalId, tuple(address addr, bytes params) executionStrategy, string metadataURI)",
  "function updateSettings(tuple(uint32 minVotingDuration, uint32 maxVotingDuration, uint32 votingDelay, string metadataURI, string daoURI, tuple(address addr, bytes params) proposalValidationStrategy, string proposalValidationStrategyMetadataURI, address[] authenticatorsToAdd, address[] authenticatorsToRemove, tuple(address addr, bytes params)[] votingStrategiesToAdd, string[] votingStrategyMetadataURIsToAdd, uint8[] votingStrategiesToRemove) input)",
  "function upgradeTo(address newImplementation)",
  "function upgradeToAndCall(address newImplementation, bytes data) payable",
  "function vote(address voter, uint256 proposalId, uint8 choice, tuple(uint8 index, bytes params)[] userVotingStrategies, string metadataURI)",
  "function votePower(uint256 proposalId, uint8 choice) view returns (uint256 votePower)",
  "function voteRegistry(uint256 proposalId, address voter) view returns (uint256 hasVoted)",
  "function votingDelay() view returns (uint32)",
  "function votingStrategies(uint8 strategyIndex) view returns (address addr, bytes params)"
]
