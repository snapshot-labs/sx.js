[
  "constructor(address _controller, uint32 _votingDelay, uint32 _minVotingDuration, uint32 _maxVotingDuration, uint256 _proposalThreshold, uint256 _quorum, tuple(address addy, bytes params)[] _votingStrategies, address[] _authenticators, address[] _executionStrategies)",
  "error AuthenticatorNotWhitelisted(address auth)",
  "error DuplicateFound(uint256 a, uint256 b)",
  "error EmptyArray()",
  "error ExecutionHashMismatch()",
  "error ExecutionStrategyNotWhitelisted(address strategy)",
  "error InvalidDuration(uint32 minVotingDuration, uint32 maxVotingDuration)",
  "error InvalidProposal()",
  "error InvalidVotingStrategyAddress()",
  "error InvalidVotingStrategyIndex(uint256 index)",
  "error MinVotingDurationHasNotElapsed()",
  "error ProposalAlreadyExecuted()",
  "error ProposalThresholdNotReached(uint256 votingPower)",
  "error QuorumNotReachedYet()",
  "error UserHasAlreadyVoted()",
  "error UserHasNoVotingPower()",
  "error VotingPeriodHasEnded()",
  "error VotingPeriodHasNotStarted()",
  "event AuthenticatorsAdded(address[] authenticators)",
  "event AuthenticatorsRemoved(address[] authenticators)",
  "event ControllerUpdated(address newController)",
  "event ExecutionStrategiesAdded(address[] executionStrategies)",
  "event ExecutionStrategiesRemoved(address[] executionStrategies)",
  "event MaxVotingDurationUpdated(uint32 newMaxVotingDuration)",
  "event MetadataUriUpdated(string newMetadataUri)",
  "event MinVotingDurationUpdated(uint32 newMinVotingDuration)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event ProposalCreated(uint256 nextProposalId, address proposerAddress, tuple(uint256 quorum, uint32 snapshotTimestamp, uint32 startTimestamp, uint32 minEndTimestamp, uint32 maxEndTimestamp, bytes32 executionHash, address executionStrategy, uint8 finalizationStatus, tuple(address addy, bytes params)[] votingStrategies) proposal, string metadataUri, bytes executionParams)",
  "event ProposalFinalized(uint256 proposalId, uint8 outcome)",
  "event ProposalThresholdUpdated(uint256 newProposalThreshold)",
  "event QuorumUpdated(uint256 newQuorum)",
  "event VoteCreated(uint256 proposalId, address voterAddress, tuple(uint8 choice, uint256 votingPower) vote)",
  "event VotingDelayUpdated(uint256 newVotingDelay)",
  "event VotingStrategiesAdded(tuple(address addy, bytes params)[] votingStrategies)",
  "event VotingStrategiesRemoved(uint8[] indices)",
  "function addAuthenticators(address[] _authenticators)",
  "function addExecutionStrategies(address[] _executionStrategies)",
  "function addVotingStrategies(tuple(address addy, bytes params)[] _votingStrategies)",
  "function cancelProposal(uint256 proposalId, bytes executionParams)",
  "function finalizeProposal(uint256 proposalId, bytes executionParams)",
  "function getController() view returns (address)",
  "function getProposal(uint256 proposalId) view returns (tuple(uint256 quorum, uint32 snapshotTimestamp, uint32 startTimestamp, uint32 minEndTimestamp, uint32 maxEndTimestamp, bytes32 executionHash, address executionStrategy, uint8 finalizationStatus, tuple(address addy, bytes params)[] votingStrategies))",
  "function getProposalStatus(uint256 proposalId) view returns (uint8)",
  "function hasVoted(uint256 proposalId, address voter) view returns (bool)",
  "function maxVotingDuration() view returns (uint32)",
  "function minVotingDuration() view returns (uint32)",
  "function nextProposalId() view returns (uint256)",
  "function owner() view returns (address)",
  "function proposalThreshold() view returns (uint256)",
  "function propose(address proposerAddress, string metadataUri, tuple(address addy, bytes params) executionStrategy, tuple(uint8 index, bytes params)[] userVotingStrategies)",
  "function quorum() view returns (uint256)",
  "function removeAuthenticators(address[] _authenticators)",
  "function removeExecutionStrategies(address[] _executionStrategies)",
  "function removeVotingStrategies(uint8[] _votingStrategyIndices)",
  "function renounceOwnership()",
  "function setController(address _controller)",
  "function setMaxVotingDuration(uint32 _maxVotingDuration)",
  "function setMetadataUri(string _metadataUri)",
  "function setMinVotingDuration(uint32 _minVotingDuration)",
  "function setProposalThreshold(uint256 _proposalThreshold)",
  "function setQuorum(uint256 _quorum)",
  "function setVotingDelay(uint32 _votingDelay)",
  "function transferOwnership(address newOwner)",
  "function vote(address voterAddress, uint256 proposalId, uint8 choice, tuple(uint8 index, bytes params)[] userVotingStrategies)",
  "function votingDelay() view returns (uint32)"
]
