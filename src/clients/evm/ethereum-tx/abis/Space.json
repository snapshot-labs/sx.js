[
  "error AuthenticatorNotWhitelisted(address auth)",
  "error DuplicateFound(uint8 index)",
  "error EmptyArray()",
  "error ExecutionStrategyNotWhitelisted()",
  "error FailedToPassProposalValidation()",
  "error InvalidCaller()",
  "error InvalidDuration(uint32 minVotingDuration, uint32 maxVotingDuration)",
  "error InvalidExecutionStrategyIndex(uint256 index)",
  "error InvalidProposal()",
  "error InvalidStrategyAddress()",
  "error InvalidStrategyIndex(uint256 index)",
  "error MinVotingDurationHasNotElapsed()",
  "error ProposalAlreadyFinalized()",
  "error ProposalFinalized()",
  "error QuorumNotReachedYet()",
  "error UserHasAlreadyVoted()",
  "error UserHasNoVotingPower()",
  "error VotingDelayHasPassed()",
  "error VotingPeriodHasEnded()",
  "error VotingPeriodHasNotStarted()",
  "event AdminChanged(address previousAdmin, address newAdmin)",
  "event AuthenticatorsAdded(address[] newAuthenticators)",
  "event AuthenticatorsRemoved(address[] authenticators)",
  "event BeaconUpgraded(address indexed beacon)",
  "event ExecutionStrategiesAdded(tuple(address addy, bytes params)[] newExecutionStrategies, string[] newExecutionStrategyMetadataURIs)",
  "event ExecutionStrategiesRemoved(uint8[] executionStrategyIndices)",
  "event Initialized(uint8 version)",
  "event MaxVotingDurationUpdated(uint32 newMaxVotingDuration)",
  "event MetadataURIUpdated(string newMetadataURI)",
  "event MinVotingDurationUpdated(uint32 newMinVotingDuration)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event ProposalCancelled(uint256 proposalId)",
  "event ProposalCreated(uint256 nextProposalId, address author, tuple(uint32 snapshotTimestamp, uint32 startTimestamp, uint32 minEndTimestamp, uint32 maxEndTimestamp, bytes32 executionPayloadHash, address executionStrategy, address author, uint8 finalizationStatus, tuple(address addy, bytes params)[] votingStrategies) proposal, string metadataUri, bytes payload)",
  "event ProposalExecuted(uint256 proposalId)",
  "event ProposalUpdated(uint256 proposalId, tuple(address addy, bytes params) newExecutionStrategy, string newMetadataURI)",
  "event ProposalValidationStrategyUpdated(tuple(address addy, bytes params) newProposalValidationStrategy)",
  "event QuorumUpdated(uint256 newQuorum)",
  "event SpaceCreated(address space, address owner, uint32 votingDelay, uint32 minVotingDuration, uint32 maxVotingDuration, tuple(address addy, bytes params) proposalValidationStrategy, string metadataURI, tuple(address addy, bytes params)[] votingStrategies, string[] votingStrategyMetadataURIs, address[] authenticators)",
  "event Upgraded(address indexed implementation)",
  "event VoteCast(uint256 proposalId, address voterAddress, uint8 choice, uint256 votingPower)",
  "event VoteCastWithMetadata(uint256 proposalId, address voterAddress, uint8 choice, uint256 votingPower, string metadataUri)",
  "event VotingDelayUpdated(uint256 newVotingDelay)",
  "event VotingStrategiesAdded(tuple(address addy, bytes params)[] newVotingStrategies, string[] newVotingStrategyMetadataURIs)",
  "event VotingStrategiesRemoved(uint8[] votingStrategyIndices)",
  "function addAuthenticators(address[] _authenticators)",
  "function addVotingStrategies(tuple(address addy, bytes params)[] _votingStrategies, string[] votingStrategyMetadataURIs)",
  "function cancel(uint256 proposalId)",
  "function execute(uint256 proposalId, bytes executionPayload)",
  "function getProposal(uint256 proposalId) view returns (tuple(uint32 snapshotTimestamp, uint32 startTimestamp, uint32 minEndTimestamp, uint32 maxEndTimestamp, bytes32 executionPayloadHash, address executionStrategy, address author, uint8 finalizationStatus, tuple(address addy, bytes params)[] votingStrategies))",
  "function getProposalStatus(uint256 proposalId) view returns (uint8)",
  "function hasVoted(uint256 proposalId, address voter) view returns (bool)",
  "function initialize(address _owner, uint32 _votingDelay, uint32 _minVotingDuration, uint32 _maxVotingDuration, tuple(address addy, bytes params) _proposalValidationStrategy, string _metadataURI, tuple(address addy, bytes params)[] _votingStrategies, string[] _votingStrategyMetadataURIs, address[] _authenticators)",
  "function maxVotingDuration() view returns (uint32)",
  "function minVotingDuration() view returns (uint32)",
  "function nextProposalId() view returns (uint256)",
  "function owner() view returns (address)",
  "function proposalThreshold() view returns (uint256)",
  "function proposalValidationStrategy() view returns (address addy, bytes params)",
  "function propose(address author, string metadataURI, tuple(address addy, bytes params) executionStrategy, bytes userParams)",
  "function proxiableUUID() view returns (bytes32)",
  "function removeAuthenticators(address[] _authenticators)",
  "function removeVotingStrategies(uint8[] _votingStrategyIndices)",
  "function renounceOwnership()",
  "function setMaxVotingDuration(uint32 _maxVotingDuration)",
  "function setMetadataURI(string _metadataURI)",
  "function setMinVotingDuration(uint32 _minVotingDuration)",
  "function setProposalValidationStrategy(tuple(address addy, bytes params) _proposalValidationStrategy)",
  "function setVotingDelay(uint32 _votingDelay)",
  "function transferOwnership(address newOwner)",
  "function updateProposal(address author, uint256 proposalId, tuple(address addy, bytes params) executionStrategy, string metadataURI)",
  "function upgradeTo(address newImplementation)",
  "function upgradeToAndCall(address newImplementation, bytes data) payable",
  "function vote(address voterAddress, uint256 proposalId, uint8 choice, tuple(uint8 index, bytes params)[] userVotingStrategies, string metadataUri)",
  "function votingDelay() view returns (uint32)",
  "function votingStrategies(uint256) view returns (address addy, bytes params)"
]
